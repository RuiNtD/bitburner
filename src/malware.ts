import { NS } from "@ns";
import { listServers } from "./lib/scan";

export async function main(ns: NS) {
  const servers = listServers(ns);
  for (const host of servers) {
    const results = await sudo(ns, host);
    if (results) {
      ns.tprint(`Hacked ${host}`);
      await startHacking(ns, host);
    }
  }
}

async function sudo(ns: NS, host: string) {
  if (host == "home") return false;

  const reqPorts = ns.getServerNumPortsRequired(host);
  let ports = 0;

  if (attemptHack(ns, host, "brutessh")) ports++;
  if (attemptHack(ns, host, "ftpcrack")) ports++;
  if (attemptHack(ns, host, "relaysmtp")) ports++;
  if (attemptHack(ns, host, "httpworm")) ports++;
  if (attemptHack(ns, host, "sqlinject")) ports++;

  if (ports >= reqPorts) {
    ns.nuke(host);
    return true;
  }
  return false;
}

type hackType =
  | "brutessh"
  | "ftpcrack"
  | "relaysmtp"
  | "httpworm"
  | "sqlinject";

function attemptHack(ns: NS, host: string, hack: hackType) {
  if (ns.fileExists(hack + ".exe", "home")) {
    ns[hack](host);
    return true;
  }
  return false;
}

async function startHacking(ns: NS, host: string) {
  ns.scriptKill("hack.js", host);
  if (ns.getServerMaxMoney(host) === 0) {
    ns.tprint(`${host} has $0 maximum. Skipping...`);
    return;
  }

  ns.scp("hack.js", host, "home");

  if (ns.getServerRequiredHackingLevel(host) > ns.getHackingLevel()) {
    return;
  }

  const scriptRam = ns.getScriptRam("hack.js", host);
  const freeRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);
  const threads = Math.floor(freeRam / scriptRam);
  if (threads) ns.exec("hack.js", host, threads);
  else ns.tprint(`${host} only has ${ns.formatRam(freeRam)} RAM free!`);
}
